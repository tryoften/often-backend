{"version":3,"sources":["app/Services/Spotify/SpotifyService.js"],"names":[],"mappings":"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","file":"app/Services/Spotify/SpotifyService.js","sourcesContent":["import 'backbonefire';\nimport ServiceBase from '../ServiceBase';\nimport { Settings as settings } from './config';\n\nvar spotifyWebApi = require('spotify-web-api-node');\nvar spotifyApi = new spotifyWebApi();\n\n/** \n * This class is responsible for fetching data from the Spotify API\n */\nclass SpotifyService extends ServiceBase {\n\t\n\t/**\n\t * Initializes the spotify service provider.\n\t * @param {object} models - supporting models\n\t *\n\t * @return {void}\n\t */\n\tconstructor (models) {\n\n\t\tsuper(models, settings);\n\n\t}\n\t\n\t/**\n\t * Main method for obtaining results from the service provider's API.\n\t * @param {object} query - search term\n\t *\n\t * @return {promise} - Promise that when resolved returns the results of the data fetch, or an error upon rejection.\n\t */\n\tfetchData (query) {\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tvar results = {};\n\t\t\tthis.getSpotifyData(query, results).then(function (data) {\n\n\t\t\t\tresolve(results);\n\n\t\t\t});\n\n\t\t});\n\n\t}\n\n\t/**\n\t * Barrier method for collecting results from multiple service provider API calls.\n\t * @param {string} query - search term\n\t * @results {object} results - object for storing data from the service provider's\n\t *\n\t * @return {promise} - Returns a promise when all sub-promises are resolved or an error on rejection.\n\t */\n\tgetSpotifyData (query, results) {\n\n\t\treturn Promise.all([\n\n\t\t\tthis.searchArtists(query, results),\n\t\t\tthis.searchAlbums(query, results),\n\t\t\tthis.searchTracks(query, results),\n\t\t\tthis.searchPlaylists(query, results)\n\n\t\t]);\n\t\t\n\t}\n\n\t/**\n\t * Searches spotify playlists using query and populates the results object with playlist information.\n\t * @param {string} query - search term\n\t * @param {object} results - object for storing data from the service provider's\n\t *\n\t * @return {promise} - Returns a promise that resolves to either true if resolved or false, when rejected.\n\t */\n\tsearchPlaylists (query, results) {\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tspotifyApi.searchPlaylists(query).then(function (data) {\n\n\t\t\t\tvar playlistItems = data.body.playlists.items;\n\t\t\t\tvar playlists = [];\n\t\t\t\tfor (let pi in playlistItems) {\n\n\t\t\t\t\tplaylists.push({\n\t\t\t\t\t\tplaylist_name : playlistItems[pi].name\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t\tresults.playlists = playlists;\n\t\t\t\tresolve(true);\n\n\t\t\t}, function (error) {\n\n\t\t\t\tconsole.log('Error detected ' + error);\n\t\t\t\treject(false);\n\n\t\t\t});\n\n\t\t});\n\n\t}\n\t\n\t/**\n\t * Searches spotify tracks using query and populates the results object with track information.\n\t * @param {string} query - search term\n\t * @param {object} results - object for storing data from the service provider's\n\t *\n\t * @return {promise} - Returns a promise that resolves to either true if resolved or false, when rejected.\n\t */\n\tsearchTracks (query, results) {\n\t\treturn new Promise(function (resolve, reject){\n\n\t\t\tspotifyApi.searchTracks(query).then(function (data) {\n\n\t\t\t\tvar trackItems = data.body.tracks.items;\n\t\t\t\tvar tracks = [];\n\t\t\t\tfor(let ti in trackItems) {\n\n\t\t\t\t\ttracks.push({\n\t\t\t\t\t\ttrack_name : trackItems[ti].name,\n\t\t\t\t\t\ttrack_image_large : trackItems[ti].album.images[0].url\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t\tresults.tracks = tracks;\n\t\t\t\tresolve(true);\n\n\t\t\t}, function (error) {\n\n\t\t\t\tconsole.log('Error detected ' + error);\n\t\t\t\treject(false);\n\n\t\t\t});\n\n\t\t});\n\t}\n\n\t/**\n\t * Searches spotify albums using query and populates the results object with album information.\n\t * @param {string} query - search term\n\t * @param {object} results - object for storing data from the service provider's\n\t *\n\t * @return {promise} - Returns a promise that resolves to either true if resolved or false, when rejected.\n\t */\n\tsearchAlbums (query, results) {\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tspotifyApi.searchAlbums(query).then(function (data) {\n\n\t\t\t\tvar albumItems = data.body.albums.items;\n\t\t\t\tvar albums = [];\n\t\t\t\tfor(let ai in albumItems) {\n\n\t\t\t\t\talbums.push({\n\t\t\t\t\t\talbum_name : albumItems[ai].name,\n\t\t\t\t\t\talbum_image_large :(albumItems[ai].images.length > 0) ? albumItems[ai].images[0].url : \"\"\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t\tresults.albums = albums;\n\t\t\t\tresolve(true);\n\n\t\t\t}, function (error) {\n\n\t\t\t\tconsole.log('Error detected ' + error);\n\t\t\t\treject(false);\n\n\t\t\t});\n\n\t\t});\n\n\t}\n\n\t/**\n\t * Searches spotify artists using query and populates the results object with artist information.\n\t * @param {string} query - search term\n\t * @param {object} results - object for storing data from the service provider's\n\t *\n\t * @return {promise} - Returns a promise that resolves to either true if resolved or false, when rejected.\n\t */\n\tsearchArtists (query, results) {\n\n\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\tspotifyApi.searchArtists(query).then(function (data) {\n\n\t\t\t\tvar artistItems = data.body.artists.items;\n\t\t\t\tvar artists = [];\n\t\t\t\tfor(let ai in artistItems) {\n\t\t\t\t\tconsole.log(artistItems[ai].images.length);\n\t\t\t\t\tartists.push({\n\t\t\t\t\t\tartist_name : artistItems[ai].name,\n\t\t\t\t\t\tartist_popularity : artistItems[ai].popularity,\n\t\t\t\t\t\tartist_image_large : (artistItems[ai].images.length > 0) ? artistItems[ai].images[0].url : \"\"\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t\tresults.artists = artists;\n\t\t\t\tresolve(true);\n\n\t\t\t}, function (error) {\n\n\t\t\t\tconsole.log('Error detected ' + error);\n\t\t\t\treject(false);\n\n\t\t\t});\n\n\t\t});\n\n\t}\n}\n\nexport default SpotifyService;\n\n"]}