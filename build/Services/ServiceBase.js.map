{"version":3,"sources":["app/Services/ServiceBase.js"],"names":[],"mappings":";;;;;;;;;;;;QAAO,qBAAqB;;QACrB,cAAc;;wBAC4B,UAAU;;iCACnC,uBAAuB;;;;IAEzC,WAAW;AACL,UADN,WAAW,GACF;wBADT,WAAW;;AAEf,MAAI,CAAC,WAAW,GAAG,oCAAiB,CAAC;EACrC;;cAHI,WAAW;;SAIT,iBAAC,OAAO,EAAE;;;;AAEhB,UAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,QAAI,WAAW,GAAG,MAAK,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;;AAE7D,QAAG,WAAW,IAAK,IAAI,CAAC,GAAG,EAAE,GAAG,MAAK,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,MAAK,WAAW,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,AAAC,EAAE;AAC3H,YAAO,CAAC,WAAW,CAAC,GAAG,CAAC,MAAK,WAAW,CAAC,CAAC,CAAC;KAC3C,MAAM;AACN,WAAK,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AAC1C,UAAI,IAAI,GAAG;AACV,SAAE,OAAM,OAAO,CAAC,EAAE,SAAI,MAAK,WAAW,AAAE;AACxC,WAAI,EAAG;AACN,sBAAc,EAAG,IAAI,CAAC,GAAG,EAAE,EAC3B;AACD,cAAO,EAAG;AACT,gBAAQ,EAAG,QAAQ;QACnB;OACD,CAAC;;AAEF,UAAI,iBAAiB,GAAG,EAAE,CAAC;AAC3B,uBAAiB,CAAC,MAAK,WAAW,CAAC,GAAG,IAAI,CAAC;;AAE3C,UAAI,sBAAsB,GAAG,EAAE,CAAC;AAChC,4BAAsB,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,iBAAiB,CAAC;;AAEjE,YAAK,WAAW,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;;AAE7C,aAAO,CAAC,IAAI,CAAC,CAAC;MACd,CAAC,CAAC;KACH;IACD,CAAC,CAAC;GAEH;;;QApCI,WAAW;;;qBAuCF,WAAW","file":"app/Services/ServiceBase.js","sourcesContent":["import 'backbone-relational';\nimport 'backbonefire';\nimport { RelationalModel, HasOne, HasMany } from 'backbone';\nimport QueryResult from '../Models/QueryResult';\n\nclass ServiceBase {\n\tconstructor() {\n\t\tthis.queryResult = new QueryResult();\n\t}\n\texecute(request) {\n\t\t// Executes the request with the provider \n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar cachedQuery = this.queryResult.get(request.get('query'));\n\t\t\t//Check if the check hasn't expired, and resolve cached data\n\t\t\tif(cachedQuery && (Date.now() - this.fetch_interval > cachedQuery.get(this.provider_id).get('meta').get('time_completed'))) {\n\t\t\t\tresolve(cachedQuery.get(this.provider_id));\n\t\t\t} else {\n\t\t\t\tthis.fetchData(request).then((contents) => {\n\t\t\t\t\tvar resp = {\n\t\t\t\t\t\tid : `${request.id}/${this.provider_id}`,\n\t\t\t\t\t\tmeta : {\n\t\t\t\t\t\t\ttime_completed : Date.now(),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresults : {\n\t\t\t\t\t\t\tcontents : contents\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t// update the cache\n\t\t\t\t\tvar providerResultMap = {};\n\t\t\t\t\tproviderResultMap[this.provider_id] = resp;\n\n\t\t\t\t\tvar queryProviderResultMap = {};\n\t\t\t\t\tqueryProviderResultMap[request.get('query')] = providerResultMap;\n\n\t\t\t\t\tthis.queryResult.set(queryProviderResultMap);\n\n\t\t\t\t\tresolve(resp);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t\n\t}\n}\n\nexport default ServiceBase;"]}