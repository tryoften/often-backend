{"version":3,"sources":["app/Services/ServiceBase.js"],"names":[],"mappings":";;;;;;;;;;;;QAAO,qBAAqB;;QACrB,cAAc;;wBAC4B,UAAU;;0CAC1B,gCAAgC;;;;IAE3D,WAAW;AAEL,UAFN,WAAW,GAEF;wBAFT,WAAW;;AAGf,MAAI,CAAC,oBAAoB,GAAG,6CAA0B,CAAC;EACvD;;cAJI,WAAW;;SAMJ,sBAAC,0BAA0B,EAAE;AACxC,OAAI,CAAC,0BAA0B,EAAE,OAAO,KAAK,CAAC;AAC9C,UAAO,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,cAAc,GAAG,0BAA0B,CAAC;GACrE;;;SAEM,iBAAC,OAAO,EAAE;;;;AAEhB,UAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,QAAI,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AACvC,QAAI,SAAS,GAAG,OAAO,CAAC,EAAE,CAAC;;;AAG3B,UAAK,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,GAAG,EAAK;AAC/C,SAAI,2BAA2B,GAAG,MAAK,oBAAoB,CAAC,0BAA0B,CAAC,WAAW,EAAE,MAAK,WAAW,CAAC,CAAC;;AAEtH,SAAI,MAAK,YAAY,CAAC,2BAA2B,CAAC,EAAE;AACnD,UAAI,IAAI,GAAG,MAAK,oBAAoB,CAAC,cAAc,CAAC,WAAW,EAAE,MAAK,WAAW,CAAC,CAAC;AACnF,UAAI,CAAC,EAAE,QAAM,SAAS,SAAI,MAAK,WAAW,AAAE,CAAC;AAC7C,aAAO,CAAC,IAAI,CAAC,CAAC;MACd,MAAM;AACN,YAAK,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ,EAAK;AAC9C,WAAI,IAAI,GAAG;AACV,UAAE,OAAM,OAAO,CAAC,EAAE,SAAI,MAAK,WAAW,AAAE;AACxC,YAAI,EAAG;AACN,uBAAc,EAAG,IAAI,CAAC,GAAG,EAAE,EAC3B;AACD,eAAO,EAAG,QAAQ;QAClB,CAAC;;AAEF,WAAI,iBAAiB,GAAG,EAAE,CAAC;AAC3B,wBAAiB,CAAC,MAAK,WAAW,CAAC,GAAG,IAAI,CAAC;;AAE3C,WAAI,sBAAsB,GAAG,EAAE,CAAC;AAChC,6BAAsB,CAAC,WAAW,CAAC,GAAG,iBAAiB,CAAC;;AAExD,aAAK,oBAAoB,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AACtD,aAAK,oBAAoB,CAAC,IAAI,EAAE,CAAC;AACjC,cAAO,CAAC,IAAI,CAAC,CAAC;OACd,CAAC,CAAC;MACH;KACD,CAAC,CAAC;AACH,UAAK,oBAAoB,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC,CAAC;GAEH;;;QAlDI,WAAW;;;qBAqDF,WAAW","file":"app/Services/ServiceBase.js","sourcesContent":["import 'backbone-relational';\nimport 'backbonefire';\nimport { RelationalModel, HasOne, HasMany } from 'backbone';\nimport CachedResultsManager from '../Models/CachedResultsManager';\n\nclass ServiceBase {\n\n\tconstructor() {\n\t\tthis.cachedResultsManager = new CachedResultsManager();\n\t}\n\n\tisCacheValid(queryProviderCompletedTime) {\n\t\tif (!queryProviderCompletedTime) return false;\n\t\treturn Date.now() - this.fetch_interval < queryProviderCompletedTime;\n\t}\n\n\texecute(request) {\n\t\t// Executes the request with the provider \n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar queryString = request.get('query');\n\t\t\tvar requestId = request.id;\n\n\t\t\t//Check if the check hasn't expired, and resolve cached data\n\t\t\tthis.cachedResultsManager.once('sync', (crm) => {\n\t\t\t\tvar providerResultCompletedTime = this.cachedResultsManager.queryProviderCompletedTime(queryString, this.provider_id);\n\n\t\t\t\tif (this.isCacheValid(providerResultCompletedTime)) {\n\t\t\t\t\tvar resp = this.cachedResultsManager.providerResult(queryString, this.provider_id);\n\t\t\t\t\tresp.id = `${requestId}/${this.provider_id}`;\n\t\t\t\t\tresolve(resp);\n\t\t\t\t} else {\n\t\t\t\t\tthis.fetchData(queryString).then((contents) => {\n\t\t\t\t\t\tvar resp = {\n\t\t\t\t\t\t\tid : `${request.id}/${this.provider_id}`,\n\t\t\t\t\t\t\tmeta : {\n\t\t\t\t\t\t\t\ttime_completed : Date.now(),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tresults : contents\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// update the cache\n\t\t\t\t\t\tvar providerResultMap = {};\n\t\t\t\t\t\tproviderResultMap[this.provider_id] = resp;\n\n\t\t\t\t\t\tvar queryProviderResultMap = {};\n\t\t\t\t\t\tqueryProviderResultMap[queryString] = providerResultMap;\n\n\t\t\t\t\t\tthis.cachedResultsManager.set(queryProviderResultMap);\n\t\t\t\t\t\tthis.cachedResultsManager.save();\n\t\t\t\t\t\tresolve(resp);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.cachedResultsManager.fetch();\n\t\t});\n\t\t\n\t}\n}\n\nexport default ServiceBase;"]}