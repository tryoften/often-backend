{"version":3,"sources":["app/Services/Giphy/GiphyService.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;QAAO,cAAc;;4BACG,gBAAgB;;;;sBACH,UAAU;;uBACC,SAAS;;;;;;IAKnD,YAAY;;;;;;;;;AAQL,UARP,YAAY,CAQJ,MAAM,EAAE;wBARhB,YAAY;;AAUhB,6BAVI,YAAY,6CAUV,MAAM,UAhBL,QAAQ,EAgBS;AACxB,MAAI,CAAC,IAAI,GAAG,aAhBL,OAAO,CAgBc;AAC3B,UAAO,EAAG,QAlBJ,QAAQ,CAkBK,QAAQ;GAC3B,CAAC,CAAC;EACH;;WAdI,YAAY;;cAAZ,YAAY;;;;;;;;;SAsBP,mBAAC,KAAK,EAAE;;;AAEjB,UAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;;AAEvC,QAAI,OAAO,GAAG,EAAE,CAAC;AACjB,WAAK,IAAI,CAAC,GAAG,CAAC,QAjCR,QAAQ,CAiCS,QAAQ,EAAE;AAChC,UAAK,EAAE;AACN,OAAC,EAAG,KAAK;AACT,aAAO,EAAE,QApCL,QAAQ,CAoCM,OAAO;MACzB;KACD,CAAC,CAAC,EAAE,CAAC,SAAS,EAAE,UAAA,IAAI,EAAI;AACxB,SAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;AAC1B,UAAK,IAAI,CAAC,IAAI,SAAS,EAAE;AACxB,aAAO,CAAC,IAAI,CAAC;AACZ,gBAAS,EAAG,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS;OAClC,CAAC,CAAC;MACH;AACD,YAAO,CAAC,OAAO,CAAC,CAAC;KACjB,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,GAAG,EAAI;AACrB,YAAO,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;AACzB,WAAM,CAAC,GAAG,CAAC,CAAC;KACZ,CAAC,CAAC;IACH,CAAC,CAAC;GAEH;;;QA9CI,YAAY;;;qBAkDH,YAAY","file":"app/Services/Giphy/GiphyService.js","sourcesContent":["import 'backbonefire';\nimport ServiceBase from '../ServiceBase';\nimport { Settings as settings } from './config';\nimport { Service as RestService, parsers } from 'restler';\n\n/** \n * This class is responsible for fetching data from the Giphy API\n */\nclass GiphyService extends ServiceBase {\n\t\n\t/**\n\t * Initializes the giphy service provider.\n\t * @param {object} models - supporting models\n\t *\n\t * @return {void}\n\t */\n\tconstructor (models) {\n\n\t\tsuper(models, settings);\n\t\tthis.rest = new RestService({\n\t\t\tbaseURL : settings.base_url\n\t\t});\n\t}\n\t\n\t/**\n\t * Main method for obtaining results from the service provider's API.\n\t * @param {object} query - search term\n\t *\n\t * @return {promise} - Promise that when resolved returns the results of the data fetch, or an error upon rejection.\n\t */\n\tfetchData (query) {\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tvar results = [];\n\t\t\tthis.rest.get(settings.base_url, {\n\t\t\t\tquery: {\n\t\t\t\t\tq : query,\n\t\t\t\t\tapi_key: settings.api_key\n\t\t\t\t}\n\t\t\t}).on('success', data => {\n\t\t\t\tvar gifsArray = data.data;\n\t\t\t\tfor (let i in gifsArray) {\n\t\t\t\t\tresults.push({\n\t\t\t\t\t\tembed_url : gifsArray[i].embed_url\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tresolve(results);\n\t\t\t}).on('error', err => {\n\t\t\t\tconsole.log('err' + err);\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\n\t}\n\n}\n\nexport default GiphyService;\n\n"]}