{"version":3,"sources":["app/Services/SoundCloud/SoundCloudService.js"],"names":[],"mappings":"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","file":"app/Services/SoundCloud/SoundCloudService.js","sourcesContent":["import 'backbonefire';\nimport ServiceBase from '../ServiceBase';\nimport { Settings as settings } from './config';\nimport { Service as RestService, parsers } from 'restler';\n\n/** \n * This class is responsible for fetching data from the Giphy API\n */\nclass SoundCloudService extends ServiceBase {\n\t\n\t/**\n\t * Initializes the soundcloud service provider.\n\t * @param {object} models - supporting models\n\t *\n\t * @return {void}\n\t */\n\tconstructor (models) {\n\n\t\tsuper(models, settings);\n\t\tthis.rest = new RestService({\n\t\t\tbaseURL : settings.base_url\n\t\t});\n\n\t}\n\t\n\t/**\n\t * Main method for obtaining results from the service provider's API.\n\t * @param {object} query - search term\n\t *\n\t * @return {promise} - Promise that when resolved returns the results of the data fetch, or an error upon rejection.\n\t */\n\tfetchData (query) {\n\n\t\treturn new Promise((resolve, reject) => {\n\n\t\t\tvar results = {};\n\t\t\tthis.getSoundCloudData(query, results).then(function (data) {\n\n\t\t\t\tresolve(results);\n\n\t\t\t});\n\n\t\t});\n\n\t}\n\n\t/**\n\t * Barrier method for collecting results from multiple service provider API calls.\n\t * @param {string} query - search term\n\t * @results {object} results - object for storing data from the service provider's\n\t *\n\t * @return {promise} - Returns a promise when all sub-promises are resolved or an error on rejection.\n\t */\n\tgetSoundCloudData (query, results) {\n\n\t\treturn Promise.all([\n\n\t\t\tthis.searchTracks(query, results),\n\t\t\tthis.searchUsers(query, results)\n\n\t\t]);\n\t\t\n\t}\n\n\t/**\n\t * Searches soundlcoud users using query and populates the results object with user information.\n\t * @param {string} query - search term\n\t * @param {object} results - object for storing data from the service provider's\n\t *\n\t * @return {promise} - Returns a promise that resolves to either true if resolved or false, when rejected.\n\t */\n\tsearchUsers (query, results) {\n\n\t\treturn new Promise( (resolve, reject) => {\n\n\t\t\tthis.rest.get(`${ settings.base_url }/users` , {\n\t\t\t\tquery : {\n\t\t\t\t\tq : query,\n\t\t\t\t\tclient_id : settings.client_id\n\t\t\t\t}\n\t\t\t}).on('success', data => {\n\t\t\t\tvar userResults = data;\n\t\t\t\tvar users = [];\n\t\t\t\tfor (let i in userResults) {\n\t\t\t\t\tusers.push({\n\t\t\t\t\t\tfirst_name : userResults[i].first_name,\n\t\t\t\t\t\tlast_name : userResults[i].last_name,\n\t\t\t\t\t\tfollowings_count : userResults[i].followings_count,\n\t\t\t\t\t\ttrack_count : userResults[i].track_count\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tresults.users = users;\n\t\t\t\tresolve(true);\n\t\t\t}).on('error', err => {\n\t\t\t\tconsole.log('err' + err);\n\t\t\t\treject(false);\n\t\t\t});\n\n\t\t});\n\n\t}\n\n\t/**\n\t * Searches soundcloud tracks using query and populates the results object with track information.\n\t * @param {string} query - search term\n\t * @param {object} results - object for storing data from the service provider's\n\t *\n\t * @return {promise} - Returns a promise that resolves to either true if resolved or false, when rejected.\n\t */\n\tsearchTracks (query, results) {\n\n\t\treturn new Promise( (resolve, reject) => {\n\n\t\t\tthis.rest.get(`${ settings.base_url }/tracks` , {\n\t\t\t\tquery : {\n\t\t\t\t\tq : query,\n\t\t\t\t\tclient_id : settings.client_id\n\t\t\t\t}\n\t\t\t}).on('success', data => {\n\t\t\t\tvar trackResults = data;\n\t\t\t\tvar tracks = [];\n\t\t\t\tfor (let i in trackResults) {\n\t\t\t\t\ttracks.push({\n\t\t\t\t\t\ttitle : trackResults[i].title,\n\t\t\t\t\t\turl : trackResults[i].uri,\n\t\t\t\t\t\tduration : trackResults[i].duration\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tresults.tracks = tracks;\n\t\t\t\tresolve(true);\n\t\t\t}).on('error', err => {\n\t\t\t\tconsole.log('err' + err);\n\t\t\t\treject(false);\n\t\t\t});\n\n\t\t});\n\t}\n}\n\nexport default SoundCloudService;\n\n"]}