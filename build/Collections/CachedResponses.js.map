{"version":3,"sources":["app/Collections/CachedResponses.js"],"names":[],"mappings":";;;;;;;;;;;;;;QAAO,cAAc;;wBACI,UAAU;;sBACX,WAAW;;oCACR,0BAA0B;;;;;;;;IAM/C,eAAe;UAAf,eAAe;wBAAf,eAAe;;;;;;;WAAf,eAAe;;cAAf,eAAe;;;;;;;;;SAQT,oBAAC,MAAM,EAAE,IAAI,EAAE;;AAEzB,OAAI,CAAC,KAAK,oCAAiB,CAAC;AAC5B,OAAI,CAAC,GAAG,gBAlBD,OAAO,0BAkB4B,MAAM,CAAC,QAAQ,AAAE,CAAC;AAC5D,OAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;GAErB;;;;;;;;;;SAQa,uBAAC,KAAK,EAAE,QAAQ,EAAE;;AAE/B,WAAQ,CAAC,EAAE,GAAG,KAAK,CAAC;AACpB,UAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;GAE1B;;;;;;;;;;SAQU,oBAAC,KAAK,EAAE;;AAElB,OAAI,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACnC,UAAO,YAAY,GAAG,YAAY,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC;GAEvD;;;;;;;;;;SAQgB,0BAAC,KAAK,EAAE;;AAExB,OAAI,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACnC,UAAO,YAAY,GAAG,YAAY,CAAC,gBAAgB,EAAE,GAAG,IAAI,CAAC;GAE7D;;;;;;;;;;SAQY,sBAAC,kBAAkB,EAAE,KAAK,EAAE;;AAExC,OAAI,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AACjD,OAAI,CAAC,kBAAkB,IAAI,CAAC,aAAa,EAAE,OAAO,KAAK,CAAC;AACxD,UAAO,IAAI,CAAC,GAAG,EAAE,GAAG,kBAAkB,GAAG,aAAa,CAAC;GAEvD;;;QAnEI,eAAe;GAAS,UARrB,QAAQ,CAQsB,UAAU;;qBAuElC,eAAe","file":"app/Collections/CachedResponses.js","sourcesContent":["import 'backbonefire';\nimport { Firebase } from 'backbone';\nimport { BaseURL } from '../config';\nimport CachedResponse from '../Models/CachedResponse';\n\n/*\n\tThis class is responsible for maintaining provider-level response cache.\n*/\n\nclass CachedResponses extends Firebase.Collection {\n\n\t/* \n\t\tDescription: Initializes the cached responses collection.\n\t\tParameters: Models (supporting models), options (supporting options)\n\t\tSignature: (Object, Object) -> Void\n\t*/\n\n\tinitialize (models, opts) {\n\n\t\tthis.model = CachedResponse;\n\t\tthis.url = `${BaseURL}/cached-responses/${models.provider}`;\n\t\tthis.autoSync = true;\n\n\t}\n\n\t/* \n\t\tDescription: Retrieves the results body of the response.\n\t\tParameters: Query (new key), response (contains results and metadata info)\n\t\tSignature: (String, Object) -> Object\n\t*/\n\n\tcacheResponse (query, response) {\n\n\t\tresponse.id = query;\n\t\treturn this.add(response);\n\n\t}\n\n\t/* \n\t\tDescription: Retrieves the results body of the response.\n\t\tParameter: Query (key) for the cache.\n\t\tSignature: (String) -> Object\n\t*/\n\n\tgetResults (query) {\n\n\t\tvar cachedResult = this.get(query);\n\t\treturn cachedResult ? cachedResult.getResults() : null;\n\n\t}\n\n\t/* \n\t\tDescription: Retrieves the time when the response was generated.\n\t\tParameter: Query (key) for the cache.\n\t\tSignature: (String) -> Integer\n\t*/\n\n\tgetTimeCompleted (query) {\n\n\t\tvar cachedResult = this.get(query);\n\t\treturn cachedResult ? cachedResult.getTimeCompleted() : null;\n\n\t}\n\n\t/* \n\t\tDescription: Checks if the cache is valid (hasn't expired).\n\t\tParameter: Datetime in milliseconds from the start of the epoch.\n\t\tSignature: (Integer) -> Bool\n\t*/\n\n\tisCacheValid (expirationInterval, query) {\n\n\t\tvar timeCompleted = this.getTimeCompleted(query);\n\t\tif (!expirationInterval || !timeCompleted) return false;\n\t\treturn Date.now() - expirationInterval < timeCompleted;\n\n\t}\n\n}\n\nexport default CachedResponses;\n"]}