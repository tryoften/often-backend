{"version":3,"sources":["app/Collections/CachedResponses.js"],"names":[],"mappings":";;;;;;;;;;;;;;QAAO,cAAc;;wBACI,UAAU;;sBACX,WAAW;;oCACR,0BAA0B;;;;;;;;IAK/C,eAAe;UAAf,eAAe;wBAAf,eAAe;;;;;;;WAAf,eAAe;;cAAf,eAAe;;;;;;;;;;SAST,oBAAC,MAAM,EAAE,IAAI,EAAE;;AAEzB,OAAI,CAAC,KAAK,oCAAiB,CAAC;AAC5B,OAAI,CAAC,GAAG,gBAlBD,OAAO,0BAkB4B,MAAM,CAAC,QAAQ,AAAE,CAAC;AAC5D,OAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;GAErB;;;;;;;;;;;SAUa,uBAAC,KAAK,EAAE,QAAQ,EAAE;;AAE/B,WAAQ,CAAC,EAAE,GAAG,KAAK,CAAC;AACpB,OAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;GAEnB;;;;;;;;;;SAQU,oBAAC,KAAK,EAAE;;AAElB,OAAI,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACnC,UAAO,YAAY,GAAG,YAAY,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC;GAEvD;;;;;;;;;;SAQgB,0BAAC,KAAK,EAAE;;AAExB,OAAI,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACnC,UAAO,YAAY,GAAG,YAAY,CAAC,gBAAgB,EAAE,GAAG,IAAI,CAAC;GAE7D;;;;;;;;;;;SASY,sBAAC,kBAAkB,EAAE,KAAK,EAAE;;AAExC,OAAI,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;AACjD,OAAI,CAAC,kBAAkB,IAAI,CAAC,aAAa,EAAE,OAAO,KAAK,CAAC;AACxD,UAAO,IAAI,CAAC,GAAG,EAAE,GAAG,kBAAkB,GAAG,aAAa,CAAC;GAEvD;;;QAvEI,eAAe;GAAS,UAPrB,QAAQ,CAOsB,UAAU;;qBA2ElC,eAAe","file":"app/Collections/CachedResponses.js","sourcesContent":["import 'backbonefire';\nimport { Firebase } from 'backbone';\nimport { BaseURL } from '../config';\nimport CachedResponse from '../Models/CachedResponse';\n\n/**\n * This class is responsible for maintaining provider-level response cache.\n */\nclass CachedResponses extends Firebase.Collection {\n\n\t/**\n\t * Initializes the cached responses collection.\n\t * @param {object} models - supporting models\n\t * @param {object} options - supporting options\n\t *\n\t * @return {void}\n\t */\n\tinitialize (models, opts) {\n\n\t\tthis.model = CachedResponse;\n\t\tthis.url = `${BaseURL}/cached-responses/${models.provider}`;\n\t\tthis.autoSync = true;\n\n\t}\n\n\n\t/**\n\t * Adds the response to the cache and returns it.\n\t * @param {string} query - search term (used as key in the cache)\n\t * @param {object} response - response containing results info and relevant meta (used as value)\n\t *\n\t * @return {void}\n\t */\n\tcacheResponse (query, response) {\n\n\t\tresponse.id = query;\n\t\tthis.add(response);\n\n\t}\n\n\t/**\n\t * Description: Retrieves the results body of the cached response.\n\t * @param {string} query - search term (used as key in the cache)\n\t *\n\t * @return {object} - results body of the response\n\t */\n\tgetResults (query) {\n\n\t\tvar cachedResult = this.get(query);\n\t\treturn cachedResult ? cachedResult.getResults() : null;\n\n\t}\n\n\t/**\n\t * Retrieves the time when the response was generated.\n\t * @param {string} query - search term (used as key in the cache)\n\t *\n\t * @return {int} - time the response was completed\n\t */\n\tgetTimeCompleted (query) {\n\n\t\tvar cachedResult = this.get(query);\n\t\treturn cachedResult ? cachedResult.getTimeCompleted() : null;\n\n\t}\n\n\t/**\n\t * Checks if the cache is valid (hasn't expired).\n\t * @param {integer} expirationInterval - Cache longevity in milliseconds.\n\t * @param {string} query - search term (used as key in the cache)\n\t *\n\t * @return {int} - time the response was completed\n\t */\n\tisCacheValid (expirationInterval, query) {\n\n\t\tvar timeCompleted = this.getTimeCompleted(query);\n\t\tif (!expirationInterval || !timeCompleted) return false;\n\t\treturn Date.now() - expirationInterval < timeCompleted;\n\n\t}\n\n}\n\nexport default CachedResponses;\n"]}